{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { schedulesSetLoading, schedulesFetchItem, schedulesAddItem, schedulesDeleteItem } from \"./actions\";\nimport { get, post, deleteRequest } from \"../../services/api\";\nimport { formatSchedule } from \"../../services/schedule\";\nexport const asyncSchedulesFetchItem = ({\n  month,\n  year\n}) => async dispatch => {\n  dispatch(schedulesSetLoading());\n  const result = await get(`schedules?month=${month}&year=${year}`);\n  const list = JSON.parse(result);\n  const formatedSchedule = list.map(r => formatSchedule(r));\n  dispatch(schedulesFetchItem(formatedSchedule));\n};\nexport const asyncSchedulesAddItem = schedule => async dispatch => {\n  // loading: true にする\n  dispatch(schedulesSetLoading());\n\n  const getUniqueStr = myStrong => {\n    let strong = 1000;\n    if (myStrong) strong = myStrong;\n    return new Date().getTime().toString(16) + Math.floor(strong * Math.random()).toString(16);\n  };\n\n  let uuid = getUniqueStr();\n\n  const body = _objectSpread({}, schedule, {\n    date: schedule.date.toISOString(),\n    id: {\n      uuid\n    }\n  });\n\n  const result = await post(\"Addschedule\", body);\n  const newSchedule = formatSchedule(result);\n  dispatch(schedulesAddItem(newSchedule));\n};\nexport const asyncSchedulesDeleteItem = id => async (dispatch, getState) => {\n  dispatch(schedulesSetLoading());\n  const currentSchedules = getState().schedules.items;\n  await deleteRequest(`schedules/${id}`); // 成功したらローカルのstateを削除\n\n  const newSchedules = currentSchedules.filter(s => s.id !== id);\n  dispatch(schedulesDeleteItem(newSchedules));\n};","map":{"version":3,"sources":["C:/Users/qcs6651/Desktop/shizuki/calen/calendar-master/src/redux/schedules/effects.js"],"names":["schedulesSetLoading","schedulesFetchItem","schedulesAddItem","schedulesDeleteItem","get","post","deleteRequest","formatSchedule","asyncSchedulesFetchItem","month","year","dispatch","result","list","JSON","parse","formatedSchedule","map","r","asyncSchedulesAddItem","schedule","getUniqueStr","myStrong","strong","Date","getTime","toString","Math","floor","random","uuid","body","date","toISOString","id","newSchedule","asyncSchedulesDeleteItem","getState","currentSchedules","schedules","items","newSchedules","filter","s"],"mappings":";;;;;;AAAA,SAASA,mBAAT,EAA8BC,kBAA9B,EAAkDC,gBAAlD,EAAoEC,mBAApE,QAA+F,WAA/F;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,aAApB,QAAyC,oBAAzC;AACA,SAASC,cAAT,QAA+B,yBAA/B;AAEA,OAAO,MAAMC,uBAAuB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAqB,MAAMC,QAAN,IAAkB;AAC1EA,EAAAA,QAAQ,CAACX,mBAAmB,EAApB,CAAR;AAEA,QAAMY,MAAM,GAAG,MAAMR,GAAG,CAAE,mBAAkBK,KAAM,SAAQC,IAAK,EAAvC,CAAxB;AACA,QAAMG,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAX,CAAb;AAEA,QAAMI,gBAAgB,GAAGH,IAAI,CAACI,GAAL,CAASC,CAAC,IAAIX,cAAc,CAACW,CAAD,CAA5B,CAAzB;AAEAP,EAAAA,QAAQ,CAACV,kBAAkB,CAACe,gBAAD,CAAnB,CAAR;AACH,CATM;AAWP,OAAO,MAAMG,qBAAqB,GAAGC,QAAQ,IAAI,MAAMT,QAAN,IAAkB;AAC/D;AACAA,EAAAA,QAAQ,CAACX,mBAAmB,EAApB,CAAR;;AAEA,QAAMqB,YAAY,GAAIC,QAAD,IAAc;AAC/B,QAAIC,MAAM,GAAG,IAAb;AACA,QAAID,QAAJ,EAAcC,MAAM,GAAGD,QAAT;AACd,WAAO,IAAIE,IAAJ,GAAWC,OAAX,GAAqBC,QAArB,CAA8B,EAA9B,IAAoCC,IAAI,CAACC,KAAL,CAAWL,MAAM,GAAGI,IAAI,CAACE,MAAL,EAApB,EAAmCH,QAAnC,CAA4C,EAA5C,CAA3C;AACH,GAJD;;AAMA,MAAII,IAAI,GAAGT,YAAY,EAAvB;;AAGA,QAAMU,IAAI,qBACHX,QADG;AACOY,IAAAA,IAAI,EAAEZ,QAAQ,CAACY,IAAT,CAAcC,WAAd,EADb;AAENC,IAAAA,EAAE,EAAE;AAAEJ,MAAAA;AAAF;AAFE,IAAV;;AAIA,QAAMlB,MAAM,GAAG,MAAMP,IAAI,CAAC,aAAD,EAAgB0B,IAAhB,CAAzB;AAEA,QAAMI,WAAW,GAAG5B,cAAc,CAACK,MAAD,CAAlC;AACAD,EAAAA,QAAQ,CAACT,gBAAgB,CAACiC,WAAD,CAAjB,CAAR;AACH,CArBM;AAuBP,OAAO,MAAMC,wBAAwB,GAAGF,EAAE,IAAI,OAAOvB,QAAP,EAAiB0B,QAAjB,KAA8B;AACxE1B,EAAAA,QAAQ,CAACX,mBAAmB,EAApB,CAAR;AACA,QAAMsC,gBAAgB,GAAGD,QAAQ,GAAGE,SAAX,CAAqBC,KAA9C;AAEA,QAAMlC,aAAa,CAAE,aAAY4B,EAAG,EAAjB,CAAnB,CAJwE,CAMxE;;AACA,QAAMO,YAAY,GAAGH,gBAAgB,CAACI,MAAjB,CAAwBC,CAAC,IAAIA,CAAC,CAACT,EAAF,KAASA,EAAtC,CAArB;AACAvB,EAAAA,QAAQ,CAACR,mBAAmB,CAACsC,YAAD,CAApB,CAAR;AACH,CATM","sourcesContent":["import { schedulesSetLoading, schedulesFetchItem, schedulesAddItem, schedulesDeleteItem } from \"./actions\";\r\nimport { get, post, deleteRequest } from \"../../services/api\";\r\nimport { formatSchedule } from \"../../services/schedule\";\r\n\r\nexport const asyncSchedulesFetchItem = ({ month, year }) => async dispatch => {\r\n    dispatch(schedulesSetLoading());\r\n\r\n    const result = await get(`schedules?month=${month}&year=${year}`);\r\n    const list = JSON.parse(result)\r\n\r\n    const formatedSchedule = list.map(r => formatSchedule(r));\r\n\r\n    dispatch(schedulesFetchItem(formatedSchedule));\r\n};\r\n\r\nexport const asyncSchedulesAddItem = schedule => async dispatch => {\r\n    // loading: true にする\r\n    dispatch(schedulesSetLoading());\r\n\r\n    const getUniqueStr = (myStrong) => {\r\n        let strong = 1000;\r\n        if (myStrong) strong = myStrong;\r\n        return new Date().getTime().toString(16) + Math.floor(strong * Math.random()).toString(16)\r\n    }\r\n\r\n    let uuid = getUniqueStr()\r\n\r\n\r\n    const body = {\r\n        ...schedule, date: schedule.date.toISOString(),\r\n        id: { uuid }\r\n    };\r\n    const result = await post(\"Addschedule\", body);\r\n\r\n    const newSchedule = formatSchedule(result);\r\n    dispatch(schedulesAddItem(newSchedule));\r\n};\r\n\r\nexport const asyncSchedulesDeleteItem = id => async (dispatch, getState) => {\r\n    dispatch(schedulesSetLoading());\r\n    const currentSchedules = getState().schedules.items;\r\n\r\n    await deleteRequest(`schedules/${id}`);\r\n\r\n    // 成功したらローカルのstateを削除\r\n    const newSchedules = currentSchedules.filter(s => s.id !== id);\r\n    dispatch(schedulesDeleteItem(newSchedules));\r\n};"]},"metadata":{},"sourceType":"module"}