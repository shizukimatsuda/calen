{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { schedulesSetLoading, schedulesFetchItem, schedulesAddItem } from \"./actions\";\nimport { get, post } from \"../../services/api\";\nimport { formatSchedule } from \"../../services/schedule\";\nexport var asyncSchedulesFetchItem = function asyncSchedulesFetchItem(_ref) {\n  var month = _ref.month,\n      year = _ref.year;\n  return function _callee(dispatch) {\n    var result, list, formatedSchedule;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(schedulesSetLoading());\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(get(\"schedules?month=\".concat(month, \"&year=\").concat(year)));\n\n          case 3:\n            result = _context.sent;\n            list = JSON.parse(result);\n            formatedSchedule = list.map(function (r) {\n              return formatSchedule(r);\n            });\n            dispatch(schedulesFetchItem(formatedSchedule));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var asyncSchedulesAddItem = function asyncSchedulesAddItem(schedule) {\n  return function _callee2(dispatch) {\n    var body, result, newSchedule;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // loading: true にする\n            dispatch(schedulesSetLoading());\n            body = _objectSpread({}, schedule, {\n              date: schedule.date.toISOString()\n            });\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(post(\"Addschedule\", body));\n\n          case 4:\n            result = _context2.sent;\n            newSchedule = formatSchedule(result);\n            dispatch(schedulesAddItem(newSchedule));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["C:/Users/qcs6651/Desktop/shizuki/calen/calendar-master/src/redux/schedules/effects.js"],"names":["schedulesSetLoading","schedulesFetchItem","schedulesAddItem","get","post","formatSchedule","asyncSchedulesFetchItem","month","year","dispatch","result","list","JSON","parse","formatedSchedule","map","r","asyncSchedulesAddItem","schedule","body","date","toISOString","newSchedule"],"mappings":";;;;;;;AAAA,SAASA,mBAAT,EAA8BC,kBAA9B,EAAkDC,gBAAlD,QAA0E,WAA1E;AACA,SAASC,GAAT,EAAcC,IAAd,QAA0B,oBAA1B;AACA,SAASC,cAAT,QAA+B,yBAA/B;AAEA,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,IAAV,QAAUA,IAAV;AAAA,SAAqB,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACxDA,YAAAA,QAAQ,CAACT,mBAAmB,EAApB,CAAR;AADwD;AAAA,6CAGnCG,GAAG,2BAAoBI,KAApB,mBAAkCC,IAAlC,EAHgC;;AAAA;AAGlDE,YAAAA,MAHkD;AAIlDC,YAAAA,IAJkD,GAI3CC,IAAI,CAACC,KAAL,CAAWH,MAAX,CAJ2C;AAMlDI,YAAAA,gBANkD,GAM/BH,IAAI,CAACI,GAAL,CAAS,UAAAC,CAAC;AAAA,qBAAIX,cAAc,CAACW,CAAD,CAAlB;AAAA,aAAV,CAN+B;AAQxDP,YAAAA,QAAQ,CAACR,kBAAkB,CAACa,gBAAD,CAAnB,CAAR;;AARwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;AAAA,CAAhC;AAWP,OAAO,IAAMG,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAC,QAAQ;AAAA,SAAI,kBAAMT,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7C;AACAA,YAAAA,QAAQ,CAACT,mBAAmB,EAApB,CAAR;AAEMmB,YAAAA,IAJuC,qBAI3BD,QAJ2B;AAIjBE,cAAAA,IAAI,EAAEF,QAAQ,CAACE,IAAT,CAAcC,WAAd;AAJW;AAAA;AAAA,6CAKxBjB,IAAI,CAAC,aAAD,EAAgBe,IAAhB,CALoB;;AAAA;AAKvCT,YAAAA,MALuC;AAOvCY,YAAAA,WAPuC,GAOzBjB,cAAc,CAACK,MAAD,CAPW;AAQ7CD,YAAAA,QAAQ,CAACP,gBAAgB,CAACoB,WAAD,CAAjB,CAAR;;AAR6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAAtC","sourcesContent":["import { schedulesSetLoading, schedulesFetchItem, schedulesAddItem } from \"./actions\";\r\nimport { get, post } from \"../../services/api\";\r\nimport { formatSchedule } from \"../../services/schedule\";\r\n\r\nexport const asyncSchedulesFetchItem = ({ month, year }) => async dispatch => {\r\n    dispatch(schedulesSetLoading());\r\n\r\n    const result = await get(`schedules?month=${month}&year=${year}`);\r\n    const list = JSON.parse(result)\r\n\r\n    const formatedSchedule = list.map(r => formatSchedule(r));\r\n\r\n    dispatch(schedulesFetchItem(formatedSchedule));\r\n};\r\n\r\nexport const asyncSchedulesAddItem = schedule => async dispatch => {\r\n    // loading: true にする\r\n    dispatch(schedulesSetLoading());\r\n\r\n    const body = { ...schedule, date: schedule.date.toISOString() };\r\n    const result = await post(\"Addschedule\", body);\r\n\r\n    const newSchedule = formatSchedule(result);\r\n    dispatch(schedulesAddItem(newSchedule));\r\n};"]},"metadata":{},"sourceType":"module"}