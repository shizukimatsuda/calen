{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { connect } from \"react-redux\";\nimport CalendarBoard from \"./presentation\";\nimport { createCalendar } from \"../../services/calendar\";\nimport { addScheduleOpenDialog, addScheduleSetValue } from \"../../redux/addSchedule/actions\";\nimport { setSchedules } from \"../../services/schedule\";\nimport { asyncSchedulesFetchItem } from \"../../redux/schedules/effects\";\nimport { currentScheduleSetItem, currentScheduleOpenDialog } from \"../../redux/currentSchedule/actions\";\n\nconst mapStateToProps = state => ({\n  calendar: state.calendar,\n  schedules: state.schedules\n});\n\nconst mapDispatchToProps = dispatch => ({\n  openAddScheduleDialog: d => {\n    dispatch(addScheduleOpenDialog());\n    dispatch(addScheduleSetValue({\n      date: d\n    }));\n  },\n  openCurrentScheduleDialog: (schedule, e) => {\n    // 他のイベントが発火するのをキャンセル\n    e.stopPropagation();\n    dispatch(currentScheduleSetItem(schedule));\n    dispatch(currentScheduleOpenDialog());\n  },\n  fetchSchedule: month => {\n    dispatch(asyncSchedulesFetchItem(month));\n  }\n});\n\nconst mergeProps = (stateProps, dispatchProps) => {\n  const {\n    calendar: month,\n    schedules: {\n      items: schedules\n    }\n  } = stateProps;\n  const calendar = setSchedules(createCalendar(month), schedules);\n  return _objectSpread({}, stateProps, {}, dispatchProps, {\n    fetchSchedule: () => dispatchProps.fetchSchedule(month),\n    calendar,\n    month\n  });\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(CalendarBoard);","map":{"version":3,"sources":["C:/Users/qcs6651/Desktop/shizuki/calen/calendar-master/src/components/CalendarBoard/container.js"],"names":["connect","CalendarBoard","createCalendar","addScheduleOpenDialog","addScheduleSetValue","setSchedules","asyncSchedulesFetchItem","currentScheduleSetItem","currentScheduleOpenDialog","mapStateToProps","state","calendar","schedules","mapDispatchToProps","dispatch","openAddScheduleDialog","d","date","openCurrentScheduleDialog","schedule","e","stopPropagation","fetchSchedule","month","mergeProps","stateProps","dispatchProps","items"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,qBAAT,EAAgCC,mBAAhC,QAA2D,iCAA3D;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,uBAAT,QAAwC,+BAAxC;AACA,SACEC,sBADF,EAEEC,yBAFF,QAGO,qCAHP;;AAKA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAChCC,EAAAA,QAAQ,EAAED,KAAK,CAACC,QADgB;AAEhCC,EAAAA,SAAS,EAAEF,KAAK,CAACE;AAFe,CAAL,CAA7B;;AAKA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACtCC,EAAAA,qBAAqB,EAAEC,CAAC,IAAI;AAC1BF,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR;AAEAW,IAAAA,QAAQ,CAACV,mBAAmB,CAAC;AAAEa,MAAAA,IAAI,EAAED;AAAR,KAAD,CAApB,CAAR;AAED,GANqC;AAQtCE,EAAAA,yBAAyB,EAAE,CAACC,QAAD,EAAWC,CAAX,KAAiB;AAC1C;AACAA,IAAAA,CAAC,CAACC,eAAF;AAEAP,IAAAA,QAAQ,CAACP,sBAAsB,CAACY,QAAD,CAAvB,CAAR;AACAL,IAAAA,QAAQ,CAACN,yBAAyB,EAA1B,CAAR;AACD,GAdqC;AAgBtCc,EAAAA,aAAa,EAAEC,KAAK,IAAI;AACtBT,IAAAA,QAAQ,CAACR,uBAAuB,CAACiB,KAAD,CAAxB,CAAR;AACD;AAlBqC,CAAL,CAAnC;;AAsBA,MAAMC,UAAU,GAAG,CAACC,UAAD,EAAaC,aAAb,KAA+B;AAChD,QAAM;AACJf,IAAAA,QAAQ,EAAEY,KADN;AAEJX,IAAAA,SAAS,EAAE;AAAEe,MAAAA,KAAK,EAAEf;AAAT;AAFP,MAGFa,UAHJ;AAKA,QAAMd,QAAQ,GAAGN,YAAY,CAACH,cAAc,CAACqB,KAAD,CAAf,EAAwBX,SAAxB,CAA7B;AAEA,2BACKa,UADL,MAEKC,aAFL;AAGEJ,IAAAA,aAAa,EAAE,MAAMI,aAAa,CAACJ,aAAd,CAA4BC,KAA5B,CAHvB;AAIEZ,IAAAA,QAJF;AAKEY,IAAAA;AALF;AAOD,CAfD;;AAkBA,eAAevB,OAAO,CAACS,eAAD,EAAkBI,kBAAlB,EACpBW,UADoB,CAAP,CACDvB,aADC,CAAf","sourcesContent":["import { connect } from \"react-redux\";\r\nimport CalendarBoard from \"./presentation\";\r\nimport { createCalendar } from \"../../services/calendar\"\r\nimport { addScheduleOpenDialog, addScheduleSetValue } from \"../../redux/addSchedule/actions\"\r\nimport { setSchedules } from \"../../services/schedule\";\r\nimport { asyncSchedulesFetchItem } from \"../../redux/schedules/effects\";\r\nimport {\r\n  currentScheduleSetItem,\r\n  currentScheduleOpenDialog\r\n} from \"../../redux/currentSchedule/actions\"\r\n\r\nconst mapStateToProps = state => ({\r\n  calendar: state.calendar,\r\n  schedules: state.schedules,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  openAddScheduleDialog: d => {\r\n    dispatch(addScheduleOpenDialog());\r\n\r\n    dispatch(addScheduleSetValue({ date: d }));\r\n\r\n  },\r\n\r\n  openCurrentScheduleDialog: (schedule, e) => {\r\n    // 他のイベントが発火するのをキャンセル\r\n    e.stopPropagation();\r\n\r\n    dispatch(currentScheduleSetItem(schedule));\r\n    dispatch(currentScheduleOpenDialog());\r\n  },\r\n\r\n  fetchSchedule: month => {\r\n    dispatch(asyncSchedulesFetchItem(month));\r\n  },\r\n\r\n});\r\n\r\nconst mergeProps = (stateProps, dispatchProps) => {\r\n  const {\r\n    calendar: month,\r\n    schedules: { items: schedules }\r\n  } = stateProps;\r\n\r\n  const calendar = setSchedules(createCalendar(month), schedules);\r\n\r\n  return {\r\n    ...stateProps,\r\n    ...dispatchProps,\r\n    fetchSchedule: () => dispatchProps.fetchSchedule(month),\r\n    calendar,\r\n    month\r\n  };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps,\r\n  mergeProps)(CalendarBoard);"]},"metadata":{},"sourceType":"module"}