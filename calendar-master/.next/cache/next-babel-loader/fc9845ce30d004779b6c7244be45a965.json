{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { connect } from \"react-redux\";\nimport CalendarBoard from \"./presentation\";\nimport { createCalendar } from \"../../services/calendar\";\nimport { addScheduleOpenDialog, addScheduleSetValue } from \"../../redux/addSchedule/actions\";\nimport { setSchedules } from \"../../services/schedule\";\nimport { asyncSchedulesFetchItem } from \"../../redux/schedules/effects\";\nimport { currentScheduleSetItem, currentScheduleOpenDialog } from \"../../redux/currentSchedule/actions\";\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    calendar: state.calendar,\n    schedules: state.schedules\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    openAddScheduleDialog: function openAddScheduleDialog(d) {\n      dispatch(addScheduleOpenDialog());\n      dispatch(addScheduleSetValue({\n        date: d\n      }));\n    },\n    openCurrentScheduleDialog: function openCurrentScheduleDialog(schedule, e) {\n      // 他のイベントが発火するのをキャンセル\n      e.stopPropagation();\n      dispatch(currentScheduleSetItem(schedule));\n      dispatch(currentScheduleOpenDialog());\n    },\n    fetchSchedule: function fetchSchedule(month) {\n      dispatch(asyncSchedulesFetchItem(month));\n    }\n  };\n};\n\nvar mergeProps = function mergeProps(stateProps, dispatchProps) {\n  var month = stateProps.calendar,\n      schedules = stateProps.schedules.items;\n  var calendar = setSchedules(createCalendar(month), schedules);\n  return _objectSpread({}, stateProps, {}, dispatchProps, {\n    fetchSchedule: function fetchSchedule() {\n      return dispatchProps.fetchSchedule(month);\n    },\n    calendar: calendar,\n    month: month\n  });\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(CalendarBoard);","map":{"version":3,"sources":["C:/Users/qcs6651/Desktop/shizuki/calen/calendar-master/src/components/CalendarBoard/container.js"],"names":["connect","CalendarBoard","createCalendar","addScheduleOpenDialog","addScheduleSetValue","setSchedules","asyncSchedulesFetchItem","currentScheduleSetItem","currentScheduleOpenDialog","mapStateToProps","state","calendar","schedules","mapDispatchToProps","dispatch","openAddScheduleDialog","d","date","openCurrentScheduleDialog","schedule","e","stopPropagation","fetchSchedule","month","mergeProps","stateProps","dispatchProps","items"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,qBAAT,EAAgCC,mBAAhC,QAA2D,iCAA3D;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,uBAAT,QAAwC,+BAAxC;AACA,SACEC,sBADF,EAEEC,yBAFF,QAGO,qCAHP;;AAKA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAChCC,IAAAA,QAAQ,EAAED,KAAK,CAACC,QADgB;AAEhCC,IAAAA,SAAS,EAAEF,KAAK,CAACE;AAFe,GAAL;AAAA,CAA7B;;AAKA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SAAK;AACtCC,IAAAA,qBAAqB,EAAE,+BAAAC,CAAC,EAAI;AAC1BF,MAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR;AAEAW,MAAAA,QAAQ,CAACV,mBAAmB,CAAC;AAAEa,QAAAA,IAAI,EAAED;AAAR,OAAD,CAApB,CAAR;AAED,KANqC;AAQtCE,IAAAA,yBAAyB,EAAE,mCAACC,QAAD,EAAWC,CAAX,EAAiB;AAC1C;AACAA,MAAAA,CAAC,CAACC,eAAF;AAEAP,MAAAA,QAAQ,CAACP,sBAAsB,CAACY,QAAD,CAAvB,CAAR;AACAL,MAAAA,QAAQ,CAACN,yBAAyB,EAA1B,CAAR;AACD,KAdqC;AAgBtCc,IAAAA,aAAa,EAAE,uBAAAC,KAAK,EAAI;AACtBT,MAAAA,QAAQ,CAACR,uBAAuB,CAACiB,KAAD,CAAxB,CAAR;AACD;AAlBqC,GAAL;AAAA,CAAnC;;AAsBA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,UAAD,EAAaC,aAAb,EAA+B;AAAA,MAEpCH,KAFoC,GAI5CE,UAJ4C,CAE9Cd,QAF8C;AAAA,MAG1BC,SAH0B,GAI5Ca,UAJ4C,CAG9Cb,SAH8C,CAGjCe,KAHiC;AAMhD,MAAMhB,QAAQ,GAAGN,YAAY,CAACH,cAAc,CAACqB,KAAD,CAAf,EAAwBX,SAAxB,CAA7B;AAEA,2BACKa,UADL,MAEKC,aAFL;AAGEJ,IAAAA,aAAa,EAAE;AAAA,aAAMI,aAAa,CAACJ,aAAd,CAA4BC,KAA5B,CAAN;AAAA,KAHjB;AAIEZ,IAAAA,QAAQ,EAARA,QAJF;AAKEY,IAAAA,KAAK,EAALA;AALF;AAOD,CAfD;;AAkBA,eAAevB,OAAO,CAACS,eAAD,EAAkBI,kBAAlB,EACpBW,UADoB,CAAP,CACDvB,aADC,CAAf","sourcesContent":["import { connect } from \"react-redux\";\r\nimport CalendarBoard from \"./presentation\";\r\nimport { createCalendar } from \"../../services/calendar\"\r\nimport { addScheduleOpenDialog, addScheduleSetValue } from \"../../redux/addSchedule/actions\"\r\nimport { setSchedules } from \"../../services/schedule\";\r\nimport { asyncSchedulesFetchItem } from \"../../redux/schedules/effects\";\r\nimport {\r\n  currentScheduleSetItem,\r\n  currentScheduleOpenDialog\r\n} from \"../../redux/currentSchedule/actions\"\r\n\r\nconst mapStateToProps = state => ({\r\n  calendar: state.calendar,\r\n  schedules: state.schedules,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  openAddScheduleDialog: d => {\r\n    dispatch(addScheduleOpenDialog());\r\n\r\n    dispatch(addScheduleSetValue({ date: d }));\r\n\r\n  },\r\n\r\n  openCurrentScheduleDialog: (schedule, e) => {\r\n    // 他のイベントが発火するのをキャンセル\r\n    e.stopPropagation();\r\n\r\n    dispatch(currentScheduleSetItem(schedule));\r\n    dispatch(currentScheduleOpenDialog());\r\n  },\r\n\r\n  fetchSchedule: month => {\r\n    dispatch(asyncSchedulesFetchItem(month));\r\n  },\r\n\r\n});\r\n\r\nconst mergeProps = (stateProps, dispatchProps) => {\r\n  const {\r\n    calendar: month,\r\n    schedules: { items: schedules }\r\n  } = stateProps;\r\n\r\n  const calendar = setSchedules(createCalendar(month), schedules);\r\n\r\n  return {\r\n    ...stateProps,\r\n    ...dispatchProps,\r\n    fetchSchedule: () => dispatchProps.fetchSchedule(month),\r\n    calendar,\r\n    month\r\n  };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps,\r\n  mergeProps)(CalendarBoard);"]},"metadata":{},"sourceType":"module"}