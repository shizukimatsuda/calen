{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { schedulesSetLoading, schedulesFetchItem, schedulesAddItem, schedulesDeleteItem } from \"./actions\";\nimport { get, post, deleteRequest } from \"../../services/api\";\nimport { formatSchedule } from \"../../services/schedule\";\nimport { ShortTextOutlined } from \"@material-ui/icons\";\nexport var asyncSchedulesFetchItem = function asyncSchedulesFetchItem(_ref) {\n  var month = _ref.month,\n      year = _ref.year;\n  return function _callee(dispatch) {\n    var result, list, formatedSchedule;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(schedulesSetLoading());\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(get(\"schedules?month=\".concat(month, \"&year=\").concat(year)));\n\n          case 3:\n            result = _context.sent;\n            list = JSON.parse(result);\n            formatedSchedule = list.map(function (r) {\n              return formatSchedule(r);\n            });\n            dispatch(schedulesFetchItem(formatedSchedule));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var asyncSchedulesAddItem = function asyncSchedulesAddItem(schedule) {\n  return function _callee2(dispatch) {\n    var getUniqueStr, uuid, body, result, newSchedule;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // loading: true にする\n            dispatch(schedulesSetLoading());\n\n            getUniqueStr = function getUniqueStr(myStrong) {\n              var strong = 1000;\n              if (myStrong) strong = myStrong;\n              return new Date().getTime().toString(16) + Math.floor(strong * Math.random()).toString(16);\n            };\n\n            uuid = getUniqueStr();\n            body = _objectSpread({}, schedule, {\n              date: schedule.date.toISOString(),\n              id: uuid\n            });\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(post(\"Addschedule\", body));\n\n          case 6:\n            result = _context2.sent;\n            newSchedule = formatSchedule(result);\n            dispatch(schedulesAddItem(newSchedule));\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var asyncSchedulesDeleteItem = function asyncSchedulesDeleteItem(id) {\n  return function _callee3(dispatch, getState) {\n    var currentSchedules, body, newSchedules;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dispatch(schedulesSetLoading());\n            currentSchedules = getState().schedules.items;\n            body = _objectSpread({}, schedule, {\n              date: schedule.date.toISOString()\n            });\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(deleteRequest(\"schedules/\".concat(id), body));\n\n          case 5:\n            // 成功したらローカルのstateを削除\n            newSchedules = currentSchedules.filter(function (s) {\n              return s.id !== id;\n            });\n            dispatch(schedulesDeleteItem(newSchedules));\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["C:/Users/qcs6651/Desktop/shizuki/calen/calendar-master/src/redux/schedules/effects.js"],"names":["schedulesSetLoading","schedulesFetchItem","schedulesAddItem","schedulesDeleteItem","get","post","deleteRequest","formatSchedule","ShortTextOutlined","asyncSchedulesFetchItem","month","year","dispatch","result","list","JSON","parse","formatedSchedule","map","r","asyncSchedulesAddItem","schedule","getUniqueStr","myStrong","strong","Date","getTime","toString","Math","floor","random","uuid","body","date","toISOString","id","newSchedule","asyncSchedulesDeleteItem","getState","currentSchedules","schedules","items","newSchedules","filter","s"],"mappings":"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","sourcesContent":["import { schedulesSetLoading, schedulesFetchItem, schedulesAddItem, schedulesDeleteItem } from \"./actions\";\r\nimport { get, post, deleteRequest } from \"../../services/api\";\r\nimport { formatSchedule } from \"../../services/schedule\";\r\nimport { ShortTextOutlined } from \"@material-ui/icons\";\r\n\r\nexport const asyncSchedulesFetchItem = ({ month, year }) => async dispatch => {\r\n    dispatch(schedulesSetLoading());\r\n\r\n    const result = await get(`schedules?month=${month}&year=${year}`);\r\n    const list = JSON.parse(result)\r\n\r\n    const formatedSchedule = list.map(r => formatSchedule(r));\r\n\r\n    dispatch(schedulesFetchItem(formatedSchedule));\r\n};\r\n\r\nexport const asyncSchedulesAddItem = schedule => async dispatch => {\r\n    // loading: true にする\r\n    dispatch(schedulesSetLoading());\r\n\r\n    const getUniqueStr = (myStrong) => {\r\n        let strong = 1000;\r\n        if (myStrong) strong = myStrong;\r\n        return new Date().getTime().toString(16) + Math.floor(strong * Math.random()).toString(16)\r\n    }\r\n\r\n    let uuid = getUniqueStr()\r\n\r\n\r\n    const body = {\r\n        ...schedule, date: schedule.date.toISOString(),\r\n        id: uuid\r\n    };\r\n    const result = await post(\"Addschedule\", body);\r\n\r\n    const newSchedule = formatSchedule(result);\r\n    dispatch(schedulesAddItem(newSchedule));\r\n};\r\n\r\nexport const asyncSchedulesDeleteItem = id => async (dispatch, getState) => {\r\n    dispatch(schedulesSetLoading());\r\n    const currentSchedules = getState().schedules.items;\r\n\r\n    const body = { ...schedule, date: schedule.date.toISOString()}\r\n\r\n    await deleteRequest(`schedules/${id}`, body);\r\n\r\n    // 成功したらローカルのstateを削除\r\n    const newSchedules = currentSchedules.filter(s => s.id !== id);\r\n    dispatch(schedulesDeleteItem(newSchedules));\r\n};"]},"metadata":{},"sourceType":"module"}